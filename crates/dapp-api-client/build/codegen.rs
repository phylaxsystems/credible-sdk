//! Code generation utilities for the dapp-api-client build script
//!
//! This module contains all the functions for generating client code from the OpenAPI spec,
//! including spec transformations and fixes.

use std::path::PathBuf;

pub fn generate_client_code() -> anyhow::Result<()> {
    const SPEC_FILE: &str = "openapi/spec.json";
    const OUTPUT_DIR: &str = "src/generated";

    // Check if spec file exists
    if !std::path::Path::new(SPEC_FILE).exists() {
        anyhow::bail!(
            "OpenAPI spec not found at {}. Run with --features=regenerate to fetch it.",
            SPEC_FILE
        );
    }

    println!("cargo:warning=Generating client code from {SPEC_FILE}");

    // Get the output directory
    let out_dir = PathBuf::from(OUTPUT_DIR);

    // Create output directory if it doesn't exist
    std::fs::create_dir_all(&out_dir)?;

    // Load the spec
    let spec_str = std::fs::read_to_string(SPEC_FILE)?;
    let mut spec_value: serde_json::Value = serde_json::from_str(&spec_str)?;

    // Remove our custom metadata field that progenitor doesn't understand
    if let Some(obj) = spec_value.as_object_mut() {
        obj.remove("x-cache-metadata");
    }

    // Fix exclusiveMinimum fields (should be boolean in OpenAPI 3.0)
    fix_exclusive_minimum(&mut spec_value);

    // Simplify Authorization headers
    simplify_authorization_headers(&mut spec_value);

    // Add missing operation IDs
    add_operation_ids(&mut spec_value);

    // Fix problematic documentation that contains invalid doctest examples
    fix_documentation(&mut spec_value);

    // Parse as OpenAPI
    let spec: openapiv3::OpenAPI = serde_json::from_value(spec_value)?;

    // Configure and run progenitor
    let mut generator = progenitor::Generator::default();

    // Generate the client code
    let tokens = generator.generate_tokens(&spec)?;

    // Write to file
    let output_path = out_dir.join("client.rs");
    let content = tokens.to_string();

    // Wrap the generated code with allow attributes to suppress warnings
    // Use @generated comment which some tools recognize as a marker for generated code
    let wrapped_content = format!(
        r#"// @generated - This file is automatically generated. Do not edit.
// rustfmt-ignore-file

#![allow(clippy::all)]
#![allow(irrefutable_let_patterns)]
#![allow(warnings)]

{content}
"#
    );

    // Write without formatting for now
    std::fs::write(&output_path, wrapped_content)?;

    println!(
        "cargo:warning=Generated client code at {}",
        output_path.display()
    );

    // Tell cargo to rerun if the spec file changes
    println!("cargo:rerun-if-changed={SPEC_FILE}");

    Ok(())
}

fn fix_exclusive_minimum(value: &mut serde_json::Value) {
    match value {
        serde_json::Value::Object(map) => {
            // Fix exclusiveMinimum if it's a number
            if let Some(exclusive_min) = map.get("exclusiveMinimum") {
                if exclusive_min.is_number() {
                    map.insert(
                        "exclusiveMinimum".to_string(),
                        serde_json::Value::Bool(true),
                    );
                }
            }
            // Fix exclusiveMaximum if it's a number
            if let Some(exclusive_max) = map.get("exclusiveMaximum") {
                if exclusive_max.is_number() {
                    map.insert(
                        "exclusiveMaximum".to_string(),
                        serde_json::Value::Bool(true),
                    );
                }
            }
            // Recurse into all values
            for (_, v) in map.iter_mut() {
                fix_exclusive_minimum(v);
            }
        }
        serde_json::Value::Array(arr) => {
            for v in arr.iter_mut() {
                fix_exclusive_minimum(v);
            }
        }
        _ => {}
    }
}

fn simplify_authorization_headers(value: &mut serde_json::Value) {
    // Traverse paths and operations to find Authorization parameters
    if let Some(paths) = value.get_mut("paths").and_then(|p| p.as_object_mut()) {
        for (_, path_item) in paths.iter_mut() {
            if let Some(path_obj) = path_item.as_object_mut() {
                for (method, operation) in path_obj.iter_mut() {
                    if let Some(op_obj) = operation.as_object_mut() {
                        // Check if this is an HTTP method
                        if ["get", "post", "put", "delete", "patch", "head", "options"]
                            .contains(&method.as_str())
                        {
                            // Look for parameters array
                            if let Some(params) =
                                op_obj.get_mut("parameters").and_then(|p| p.as_array_mut())
                            {
                                for param in params.iter_mut() {
                                    if let Some(param_obj) = param.as_object_mut() {
                                        // Check if this is an Authorization header parameter
                                        if param_obj.get("in").and_then(|v| v.as_str())
                                            == Some("header")
                                            && param_obj.get("name").and_then(|v| v.as_str())
                                                == Some("Authorization")
                                        {
                                            // Simplify the schema to just a string type without pattern
                                            if let Some(schema) = param_obj
                                                .get_mut("schema")
                                                .and_then(|s| s.as_object_mut())
                                            {
                                                // Remove pattern constraint
                                                schema.remove("pattern");
                                                // Ensure it's just a simple string
                                                schema.insert(
                                                    "type".to_string(),
                                                    serde_json::Value::String("string".to_string()),
                                                );
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

fn add_operation_ids(value: &mut serde_json::Value) {
    if let Some(paths) = value.get_mut("paths").and_then(|p| p.as_object_mut()) {
        for (path, path_item) in paths.iter_mut() {
            if let Some(path_obj) = path_item.as_object_mut() {
                for (method, operation) in path_obj.iter_mut() {
                    if let Some(op_obj) = operation.as_object_mut() {
                        // Only add operationId if it doesn't exist and this is an HTTP method
                        if !op_obj.contains_key("operationId")
                            && ["get", "post", "put", "delete", "patch", "head", "options"]
                                .contains(&method.as_str())
                        {
                            // Generate operationId from method and path
                            let path_parts: Vec<&str> =
                                path.split('/').filter(|s| !s.is_empty()).collect();

                            let operation_id = format!(
                                "{}_{}",
                                method,
                                path_parts
                                    .join("_")
                                    .replace("{", "")
                                    .replace("}", "")
                                    .replace("-", "_")
                            );

                            op_obj.insert(
                                "operationId".to_string(),
                                serde_json::Value::String(operation_id),
                            );
                        }
                    }
                }
            }
        }
    }
}

fn fix_documentation(value: &mut serde_json::Value) {
    // Fix the info.description field that contains problematic doctest-like examples
    if let Some(info) = value.get_mut("info").and_then(|i| i.as_object_mut()) {
        if let Some(description) = info.get_mut("description").and_then(|d| d.as_str()) {
            // Replace the problematic Authorization: Bearer example with valid documentation
            let fixed_description = description.replace(
                "```\nAuthorization: Bearer <jwt_token>\n```",
                "```http\nAuthorization: Bearer <jwt_token>\n```",
            );

            info.insert(
                "description".to_string(),
                serde_json::Value::String(fixed_description),
            );
        }
    }

    // Also check for similar issues in operation descriptions
    if let Some(paths) = value.get_mut("paths").and_then(|p| p.as_object_mut()) {
        for (_, path_item) in paths.iter_mut() {
            if let Some(path_obj) = path_item.as_object_mut() {
                for (method, operation) in path_obj.iter_mut() {
                    if let Some(op_obj) = operation.as_object_mut() {
                        // Check if this is an HTTP method
                        if ["get", "post", "put", "delete", "patch", "head", "options"]
                            .contains(&method.as_str())
                        {
                            // Fix description if it exists
                            if let Some(desc) =
                                op_obj.get_mut("description").and_then(|d| d.as_str())
                            {
                                if desc.contains("Authorization: Bearer") {
                                    let fixed_desc = desc.replace(
                                        "```\nAuthorization: Bearer",
                                        "```http\nAuthorization: Bearer",
                                    );
                                    op_obj.insert(
                                        "description".to_string(),
                                        serde_json::Value::String(fixed_desc),
                                    );
                                }
                            }

                            // Fix summary if it exists
                            if let Some(summary) =
                                op_obj.get_mut("summary").and_then(|s| s.as_str())
                            {
                                if summary.contains("Authorization: Bearer") {
                                    let fixed_summary = summary.replace(
                                        "```\nAuthorization: Bearer",
                                        "```http\nAuthorization: Bearer",
                                    );
                                    op_obj.insert(
                                        "summary".to_string(),
                                        serde_json::Value::String(fixed_summary),
                                    );
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
