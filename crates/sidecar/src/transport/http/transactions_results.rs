use crate::{
    engine::queue::TxQueueContents,
    transactions_state::{
        RequestTransactionResult,
        TransactionsState,
    },
};
use revm::primitives::alloy_primitives::TxHash;
use std::sync::Arc;

/// Wrapper for `TransactionsState` for read-only transactions results.
/// `QueryTransactionsResults` is a wrapper on top of `TransactionState` exposing only methods to read
/// and requests results generated by the engine.
#[derive(Clone, Debug)]
pub struct QueryTransactionsResults {
    transactions_state: Arc<TransactionsState>,
}

impl QueryTransactionsResults {
    pub fn new(transactions_state: Arc<TransactionsState>) -> Self {
        Self { transactions_state }
    }

    pub fn add_accepted_tx(&self, tx_queue_contents: &TxQueueContents) {
        self.transactions_state.add_accepted_tx(tx_queue_contents);
    }

    pub fn is_tx_received(&self, tx_hash: &TxHash) -> bool {
        self.transactions_state.is_tx_received(tx_hash)
    }

    pub fn request_transaction_result(&self, tx_hash: &TxHash) -> RequestTransactionResult {
        self.transactions_state.request_transaction_result(tx_hash)
    }
}
